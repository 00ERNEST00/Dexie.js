{"version":3,"sources":["../tools/tmp/src/Dexie.Observable.js"],"names":["Observable","db","wakeupObservers","lastWrittenRevision","latestRevision","name","Dexie","ignoreTransaction","on","fire","localStorage","setItem","crudMonitor","table","hook","_observing","tableName","subscribe","primKey","obj","trans","rv","undefined","schema","uuid","createUUID","keyPath","setByKeyPath","change","source","key","type","CREATE","promise","_changes","add","then","rev","_lastWrittenRevision","Math","max","this","onsuccess","resultKey","_then","put","onerror","err","delete","mods","oldObj","modsWithoutUndefined","anythingChanged","newObj","deepClone","propPath","mod","delByKeyPath","currentValue","getByKeyPath","JSON","stringify","UPDATE","DELETE","onLatestRevisionIncremented","dbname","handledRevision","vip","readChanges","catch","e","recursion","wasPartial","ongoingOperation","partial","ourSyncNode","mySyncNode","Promise","reject","DatabaseClosedError","LIMIT","where","above","myRevision","limit","toArray","changes","length","lastChange","ourNodeStillExists","_syncNodes","equals","id","modify","syncNode","lastHeartBeat","Date","now","deleteTimeStamp","browserIsShuttingDown","Error","close","console","error","global","location","reload","finally","poll","pollHandle","currentInstance","cleanup","consumeIntercommMessages","setTimeout","LOCAL_POLL","transaction","weBecameMaster","below","NODE_TIMEOUT","filter","node","value","removeItem","isMaster","update","_intercomm","destinationNode","msg","wantReply","HIBERNATE_GRACE_PERIOD","deleteOldChanges","onBeforeUnload","event","wereTheOneDying","toString","onSuicide","nodeID","messages","forEach","consumeMessage","anyOf","map","request","requestsWaitingForReply","requestId","isFailure","message","resolve","result","sendMessage","sender","extend","onIntercomm","localStorageImpl","SyncNode","defineClass","Number","String","url","syncProtocol","syncContext","syncOptions","Object","connected","status","appliedRemoteRevision","remoteBaseRevisions","local","remote","dbUploadState","tablesToUpload","currentTable","currentKey","localBaseRevision","defineProperty","get","fake","version","stores","_uncommittedChanges","mapToClass","DatabaseChange","Version","prototype","_parseStoresSpec","override","origFunc","dbSchema","call","keys","indexOf","substr","observable","addEventType","promisableChain","nop","_createTransaction","mode","storenames","dbschema","parent","dynamicallyOpened","apply","arguments","addChanges","some","storeName","slice","push","rootTransaction","findRootTransaction","timeoutHandle","clearTimeout","open","origOpen","_allTables","origClose","unsubscribe","suicideNurseCall","origDelete","orderBy","last","latestRevisionIncremented","first","currentMaster","options","tables","count","recieverAlive","masterNode","messageId","intercomm","broadcastMessage","bIncludeSelf","mySyncNodeId","nodes","all","f1","f2","res","thiz","args","self","Events","d","replace","c","r","random","floor","CHUNK_SIZE","oldestNode","primaryKeys","keysToDelete","bulkDelete","isOpen","_onStorage","parts","split","prop","parseInt","newValue","isNaN","_onBeforeUnload","beforeunload","ex","addEventListener","addons"],"mappings":"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","file":"dist/dexie-observable.min.js.map","sourcesContent":["/// <reference path=\"../../../dist/dexie.js\" />\n\n/**\r\n * Dexie.Observable.js\r\n * ===================\r\n * Dexie addon for observing database changes not just on local db instance but also on other instances and windows.\r\n *\r\n * version: {version} Alpha, {date}\r\n *\r\n * Disclaimber: This addon is in alpha status meaning that\r\n * its API and behavior may change.\r\n *\r\n */\nimport Dexie from 'dexie';\n\nvar global = self;\n\n/** class DatabaseChange\r\n    *\r\n    *  Object contained by the _changes table.\r\n    */\nvar DatabaseChange = Dexie.defineClass({\n    rev: Number, // Auto-incremented primary key\n    source: String, // Optional source creating the change. Set if transaction.source was set when doing the operation.\n    table: String, // Table name\n    key: Object, // Primary key. Any type.\n    type: Number, // 1 = CREATE, 2 = UPDATE, 3 = DELETE\n    obj: Object, // CREATE: obj contains the object created.\n    mods: Object, // UPDATE: mods contains the modifications made to the object.\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\n});\n\n// Import some usable helper functions\nvar override = Dexie.override;\nvar Promise = Dexie.Promise;\nvar browserIsShuttingDown = false;\n\nexport default function Observable(db) {\n    /// <summary>\n    ///   Extension to Dexie providing Syncronization capabilities to Dexie.\n    /// </summary>\n    /// <param name=\"db\" type=\"Dexie\"></param>\n\n    var NODE_TIMEOUT = 20000,\n        // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\n    HIBERNATE_GRACE_PERIOD = 20000,\n        // 20 seconds\n    // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes. \n    // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\n    LOCAL_POLL = 2000,\n        // 1 second. In real-world there will be this value + the time it takes to poll().\n    HEARTBEAT_INTERVAL = NODE_TIMEOUT - 5000,\n        CREATE = 1,\n        UPDATE = 2,\n        DELETE = 3;\n\n    var localStorage = Observable.localStorageImpl;\n\n    /** class SyncNode\r\n        *\r\n        * Object contained in the _syncNodes table.\r\n        */\n    var SyncNode = Dexie.defineClass({\n        //id: Number,\n        myRevision: Number,\n        type: String, // \"local\" or \"remote\"\n        lastHeartBeat: Number,\n        deleteTimeStamp: Number, // In case lastHeartBeat is too old, a value of now + HIBERNATE_GRACE_PERIOD will be set here. If reached before node wakes up, node will be deleted.\n        url: String, // Only applicable for \"remote\" nodes. Only used in Dexie.Syncable.\n        isMaster: Number, // 1 if true. Not using Boolean because it's not possible to index Booleans in IE implementation of IDB.\n\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\n        syncProtocol: String, // Tells which implementation of ISyncProtocol to use for remote syncing. \n        syncContext: null,\n        syncOptions: Object,\n        connected: false, // FIXTHIS: Remove! Replace with status.\n        status: Number,\n        appliedRemoteRevision: null,\n        remoteBaseRevisions: [{ local: Number, remote: null }],\n        dbUploadState: {\n            tablesToUpload: [String],\n            currentTable: String,\n            currentKey: null,\n            localBaseRevision: Number\n        }\n    });\n\n    var mySyncNode = null;\n\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\n    Object.defineProperty(db, \"_localSyncNode\", {\n        get: function () {\n            return mySyncNode;\n        }\n    });\n\n    var pollHandle = null;\n\n    if (Dexie.fake) {\n        // This code will never run.\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\n        db.version(1).stores({\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\n            _changes: \"++rev\",\n            _intercomm: \"++id,destinationNode\",\n            _uncommittedChanges: \"++id,node\"\n        });\n        db._syncNodes.mapToClass(SyncNode);\n        db._changes.mapToClass(DatabaseChange);\n        mySyncNode = new SyncNode({\n            myRevision: 0,\n            type: \"local\",\n            lastHeartBeat: Date.now(),\n            deleteTimeStamp: null\n        });\n    }\n\n    //\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\n    //\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, function (origFunc) {\n        return function (stores, dbSchema) {\n            // Create the _changes and _syncNodes tables\n            stores[\"_changes\"] = \"++rev\";\n            stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,&url,isMaster,type,status\";\n            stores[\"_intercomm\"] = \"++id,destinationNode\";\n            stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\n            // Call default implementation. Will populate the dbSchema structures.\n            origFunc.call(this, stores, dbSchema);\n            // Allow UUID primary keys using $$ prefix on primary key or indexes\n            Object.keys(dbSchema).forEach(function (tableName) {\n                var schema = dbSchema[tableName];\n                if (schema.primKey.name.indexOf('$$') === 0) {\n                    schema.primKey.uuid = true;\n                    schema.primKey.name = schema.primKey.name.substr(2);\n                    schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\n                }\n            });\n            // Now mark all observable tables\n            Object.keys(dbSchema).forEach(function (tableName) {\n                // Marked observable tables with \"observable\" in their TableSchema.\n                if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\n                    dbSchema[tableName].observable = true;\n                }\n            });\n        };\n    });\n\n    // changes event on db:\n    db.on.addEventType({\n        changes: 'asap',\n        cleanup: [promisableChain, nop], // fire (nodesTable, changesTable, trans). Hook called when cleaning up nodes. Subscribers may return a Promise to to more stuff. May do additional stuff if local sync node is master.\n        message: 'asap'\n    });\n\n    //\n    // Overide transaction creation to always include the \"_changes\" store when any observable store is involved.\n    //\n    db._createTransaction = override(db._createTransaction, function (origFunc) {\n        return function (mode, storenames, dbschema, parent) {\n            if (db.dynamicallyOpened()) return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\n            var addChanges = false;\n            if (mode === 'readwrite' && storenames.some(function (storeName) {\n                return dbschema[storeName] && dbschema[storeName].observable;\n            })) {\n                // At least one included store is a observable store. Make sure to also include the _changes store.\n                addChanges = true;\n                storenames = storenames.slice(0); // Clone\n                if (storenames.indexOf(\"_changes\") === -1) storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\n            }\n            // Call original db._createTransaction()\n            var trans = origFunc.call(this, mode, storenames, dbschema, parent);\n            // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\n            if (addChanges) {\n                trans._lastWrittenRevision = 0;\n                trans.on('complete', function () {\n                    if (trans._lastWrittenRevision) {\n                        // Changes were written in this transaction.\n                        if (!parent) {\n                            // This is root-level transaction, i.e. a physical commit has happened.\n                            // Delay-trigger a wakeup call:\n                            if (wakeupObservers.timeoutHandle) clearTimeout(wakeupObservers.timeoutHandle);\n                            wakeupObservers.timeoutHandle = setTimeout(function () {\n                                delete wakeupObservers.timeoutHandle;\n                                wakeupObservers(trans._lastWrittenRevision);\n                            }, 25);\n                        } else {\n                            // This is just a virtual commit of a sub transaction.\n                            // Wait with waking up observers until root transaction has committed.\n                            // Make sure to mark root transaction so that it will wakeup observers upon commit.\n                            var rootTransaction = function findRootTransaction(trans) {\n                                return trans.parent ? findRootTransaction(trans.parent) : trans;\n                            }(parent);\n                            rootTransaction._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rootTransaction.lastWrittenRevision || 0);\n                        }\n                    }\n                });\n                // Derive \"source\" property from parent transaction by default\n                if (trans.parent && trans.parent.source) trans.source = trans.parent.source;\n            }\n            return trans;\n        };\n    });\n\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\n    // window with the same database name has been created already, this static property will already be set correctly.\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\n\n    function wakeupObservers(lastWrittenRevision) {\n        // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\n        if (Observable.latestRevision[db.name] < lastWrittenRevision) {\n            // Set the static property lastRevision[db.name] to the revision of the last written change.\n            Observable.latestRevision[db.name] = lastWrittenRevision;\n            // Wakeup ourselves, and any other db instances on this window:\n            Dexie.ignoreTransaction(function () {\n                Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\n            });\n            // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\n            // We need a storage event to wakeup other windwos.\n            // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\n            // the purpose to wakeup db instances in other windows.\n            if (localStorage) localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\n        }\n    }\n\n    db.open = override(db.open, function (origOpen) {\n        return function () {\n            //\n            // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\n            //\n            Object.keys(db._allTables).forEach(function (tableName) {\n                var table = db._allTables[tableName];\n                if (table.schema.observable) {\n                    crudMonitor(table);\n                }\n                if (table.name === \"_syncNodes\") {\n                    table.mapToClass(SyncNode);\n                }\n            });\n            return origOpen.apply(this, arguments);\n        };\n    });\n\n    db.close = override(db.close, function (origClose) {\n        return function () {\n            if (db.dynamicallyOpened()) return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\n            // Teardown our framework.\n            if (wakeupObservers.timeoutHandle) {\n                clearTimeout(wakeupObservers.timeoutHandle);\n                delete wakeupObservers.timeoutHandle;\n            }\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\n            Observable.on('intercomm').unsubscribe(onIntercomm);\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\n            // Inform other db instances in same window that we are dying:\n            if (mySyncNode && mySyncNode.id) {\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.id);\n                // Inform other windows as well:\n                if (localStorage) {\n                    localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\n                }\n                mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n                mySyncNode.lastHeartBeat = 0;\n                db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n                mySyncNode = null;\n            }\n\n            if (pollHandle) clearTimeout(pollHandle);\n            pollHandle = null;\n            return origClose.apply(this, arguments);\n        };\n    });\n\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\n    db.delete = override(db.delete, function (origDelete) {\n        return function () {\n            return origDelete.apply(this, arguments).then(function (result) {\n                // Reset Observable.latestRevision[db.name]\n                Observable.latestRevision[db.name] = 0;\n                return result;\n            });\n        };\n    });\n\n    //\n    // The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\n    //\n    function crudMonitor(table) {\n        /// <param name=\"table\" type=\"db.Table\"></param>\n        if (table.hook._observing) return;\n        table.hook._observing = true;\n\n        var tableName = table.name;\n        table.hook('creating').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var rv = undefined;\n            if (primKey === undefined && table.schema.primKey.uuid) {\n                primKey = rv = Observable.createUUID();\n                if (table.schema.primKey.keyPath) {\n                    Dexie.setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\n                }\n            }\n\n            var change = {\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey === undefined ? null : primKey,\n                type: CREATE,\n                obj: obj\n            };\n\n            var promise = db._changes.add(change).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n\n            // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\n            this.onsuccess = function (resultKey) {\n                if (primKey != resultKey) promise._then(function () {\n                    change.key = resultKey;\n                    db._changes.put(change);\n                });\n            };\n            this.onerror = function (err) {\n                // If the main operation fails, make sure to regret the change\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    db._changes.delete(rev);\n                });\n            };\n\n            return rv;\n        });\n\n        table.hook('updating').subscribe(function (mods, primKey, oldObj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            // mods may contain property paths with undefined as value if the property\n            // is being deleted. Since we cannot persist undefined we need to act\n            // like those changes is setting the value to null instead.\n            var modsWithoutUndefined = {};\n            // As of current Dexie version (1.0.3) hook may be called even if it wouldnt really change.\n            // Therefore we may do that kind of optimization here - to not add change entries if\n            // there's nothing to change.\n            var anythingChanged = false;\n            var newObj = Dexie.deepClone(oldObj);\n            for (var propPath in mods) {\n                var mod = mods[propPath];\n                if (typeof mod === 'undefined') {\n                    Dexie.delByKeyPath(newObj, propPath);\n                    modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\n                    anythingChanged = true;\n                } else {\n                    var currentValue = Dexie.getByKeyPath(oldObj, propPath);\n                    if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\n                        Dexie.setByKeyPath(newObj, propPath, mod);\n                        modsWithoutUndefined[propPath] = mod;\n                        anythingChanged = true;\n                    }\n                }\n            }\n            if (anythingChanged) {\n                var change = {\n                    source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                    table: tableName,\n                    key: primKey,\n                    type: UPDATE,\n                    mods: modsWithoutUndefined,\n                    oldObj: oldObj,\n                    obj: newObj\n                };\n                var promise = db._changes.add(change); // Just so we get the correct revision order of the update...\n                this.onsuccess = function () {\n                    promise._then(function (rev) {\n                        trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                    });\n                };\n                this.onerror = function (err) {\n                    // If the main operation fails, make sure to regret the change.\n                    promise._then(function (rev) {\n                        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                        db._changes.delete(rev);\n                    });\n                };\n            }\n        });\n\n        table.hook('deleting').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var promise = db._changes.add({\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey,\n                type: DELETE,\n                oldObj: obj\n            }).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n            this.onerror = function () {\n                // If the main operation fails, make sure to regret the change.\n                // Using _then because if promise is already fullfilled, the standard then() would\n                // do setTimeout() and we would loose the transaction.\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    db._changes.delete(rev);\n                });\n            };\n        });\n    }\n\n    // When db opens, make sure to start monitor any changes before other db operations will start.\n    db.on(\"ready\", function startObserving() {\n        if (db.dynamicallyOpened()) return db; // Don't observe dynamically opened databases.\n\n        return db.table(\"_changes\").orderBy(\"rev\").last(function (lastChange) {\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\n            // Therefore we know that the retrieved value will be This query will\n            var latestRevision = lastChange ? lastChange.rev : 0;\n            mySyncNode = new SyncNode({\n                myRevision: latestRevision,\n                type: \"local\",\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null,\n                isMaster: 0\n            });\n            if (Observable.latestRevision[db.name] < latestRevision) {\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\n                // There are other db instances in same window that hasnt yet been informed about a new revision\n                Observable.latestRevision[db.name] = latestRevision;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\n                });\n            }\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\n            return db.transaction('rw', '_syncNodes', function () {\n                return db._syncNodes.where('isMaster').equals(1).first(function (currentMaster) {\n                    if (!currentMaster) {\n                        // There's no master. We must be the master\n                        mySyncNode.isMaster = 1;\n                    } else if (currentMaster.lastHeartBeat < Date.now() - NODE_TIMEOUT) {\n                        // Master have been inactive for too long\n                        // Take over mastership\n                        mySyncNode.isMaster = 1;\n                        currentMaster.isMaster = 0;\n                        return db._syncNodes.put(currentMaster);\n                    }\n                }).then(function () {\n                    // Add our node to DB and start subscribing to events\n                    return db._syncNodes.add(mySyncNode).then(function () {\n                        Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\n                        Observable.on('beforeunload', onBeforeUnload);\n                        Observable.on('suicideNurseCall', onSuicide);\n                        Observable.on('intercomm', onIntercomm);\n                        // Start polling for changes and do cleanups:\n                        pollHandle = setTimeout(poll, LOCAL_POLL);\n                    });\n                });\n            }).then(function () {\n                cleanup();\n            });\n        });\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\n\n    var handledRevision = 0;\n\n    function onLatestRevisionIncremented(dbname, latestRevision) {\n        if (dbname === db.name) {\n            if (handledRevision >= latestRevision) return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\n            handledRevision = latestRevision;\n            Dexie.vip(function () {\n                readChanges(latestRevision).catch('DatabaseClosedError', function (e) {\n                    // Handle database closed error gracefully while reading changes.\n                    // Don't trigger 'unhandledrejection'.\n                    // Even though we intercept the close() method, it might be called when in the middle of\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\n                });\n            });\n        }\n    }\n\n    function readChanges(latestRevision, recursion, wasPartial) {\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\n        // should be handled in case database is totally empty we should fail if sync is not available)\n        if (!recursion && readChanges.ongoingOperation) {\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\n            return readChanges.ongoingOperation;\n        }\n\n        var partial = false;\n        var ourSyncNode = mySyncNode; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\n        if (!ourSyncNode) {\n            return Promise.reject(new Dexie.DatabaseClosedError());\n        }\n        var LIMIT = 1000;\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\n            if (changes.length > 0) {\n                var lastChange = changes[changes.length - 1];\n                partial = changes.length === LIMIT;\n                db.on('changes').fire(changes, partial);\n                ourSyncNode.myRevision = lastChange.rev;\n            } else if (wasPartial) {\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\n                // we HAVE TO trigger changes again with empty list and partial = false\n                db.on('changes').fire([], false);\n            }\n\n            var ourNodeStillExists = false;\n            return db._syncNodes.where(':id').equals(ourSyncNode.id).modify(function (syncNode) {\n                ourNodeStillExists = true;\n                syncNode.lastHeartBeat = Date.now(); // Update heart beat (not nescessary, but why not!)\n                syncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\n                syncNode.myRevision = Math.max(syncNode.myRevision, ourSyncNode.myRevision);\n            }).then(function () {\n                return ourNodeStillExists;\n            });\n        }).then(function (ourNodeStillExists) {\n            if (!ourNodeStillExists) {\n                // My node has been deleted. We must have been lazy and got removed by another node.\n                if (browserIsShuttingDown) {\n                    throw new Error(\"Browser is shutting down\");\n                } else {\n                    db.close();\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\n                    if (global.location) global.location.reload(true);\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\n                }\n            }\n\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\n            // resolve until all changes have been read.\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\n                // In either case, call readChanges() again until we're done.\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\n            }\n        }).finally(function () {\n            delete readChanges.ongoingOperation;\n        });\n\n        if (!recursion) {\n            readChanges.ongoingOperation = promise;\n        }\n        return promise;\n    }\n\n    function heartbeat() {\n        var ourSyncNodeId = mySyncNode && mySyncNode.id;\n        if (!ourSyncNodeId) return;\n        db.transaction('rw!', db._syncNodes, function () {\n            db._syncNodes.where({ id: ourSyncNodeId }).first(function (ourSyncNode) {\n                if (!ourSyncNode) {\n                    // We do not exist anymore. Call db.close() to teardown polls etc.\n                    if (db.isOpen()) db.close();\n                    return;\n                }\n                ourSyncNode.lastHeartBeat = Date.now();\n                ourSyncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\n                return db._syncNodes.put(ourSyncNode);\n            });\n        }).then(function () {\n            setTimeout(heartbeat, HEARTBEAT_INTERVAL);\n        });\n    }\n\n    function poll() {\n        pollHandle = null;\n        var currentInstance = mySyncNode && mySyncNode.id;\n        if (!currentInstance) return;\n        Dexie.vip(function () {\n            // VIP ourselves. Otherwise we might not be able to consume intercomm messages from master node before database has finished opening. This would make DB stall forever. Cannot rely on storage-event since it may not always work in some browsers of different processes.\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages).catch('DatabaseClosedError', function (e) {\n                // Handle database closed error gracefully while reading changes.\n                // Don't trigger 'unhandledrejection'.\n                // Even though we intercept the close() method, it might be called when in the middle of\n                // reading changes and then that flow will cancel with DatabaseClosedError.\n            }).finally(function () {\n                // Poll again in given interval:\n                if (mySyncNode && mySyncNode.id === currentInstance) {\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\n                }\n            });\n        });\n    }\n\n    function cleanup() {\n        var ourSyncNode = mySyncNode;\n        if (!ourSyncNode) return Promise.reject(new Dexie.DatabaseClosedError());\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function () {\n            // Cleanup dead local nodes that has no heartbeat for over a minute\n            // Dont do the following:\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\n            var weBecameMaster = false;\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).filter(function (node) {\n                return node.type === 'local';\n            }).modify(function (node) {\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\n                    // Delete the node.\n                    delete this.value;\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\n                    if (localStorage) {\n                        localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\n                    }\n                    // Check if we are deleting a master node\n                    if (node.isMaster) {\n                        // The node we are deleting is master. We must take over that role.\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\n                        weBecameMaster = true;\n                    }\n                    // Cleanup intercomm messages destinated to the node being deleted.\n                    // Those that waits for reply should be redirected to us.\n                    db._intercomm.where({ destinationNode: node.id }).modify(function (msg) {\n                        if (msg.wantReply) msg.destinationNode = ourSyncNode.id;else\n                            // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\n                            delete this.value;\n                    });\n                } else if (!node.deleteTimeStamp) {\n                    // Mark the node for deletion\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\n                }\n            }).then(function () {\n                // Cleanup old revisions that no node is interested of.\n                Observable.deleteOldChanges(db);\n                return db.on(\"cleanup\").fire(weBecameMaster);\n            });\n        });\n    }\n\n    function onBeforeUnload(event) {\n        // Mark our own sync node for deletion.\n        if (!mySyncNode) return;\n        browserIsShuttingDown = true;\n        mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n        mySyncNode.lastHeartBeat = 0;\n        db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\n        if (localStorage) {\n            localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\n        }\n    }\n\n    function onSuicide(dbname, nodeID) {\n        if (dbname === db.name && !Observable.wereTheOneDying) {\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\n            // It's own call to put() may have been cancelled.\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\n            Dexie.vip(function () {\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\n            });\n        }\n    }\n\n    //\n    // Intercommunication between nodes\n    //\n    // Enable inter-process communication between browser windows\n\n    var requestsWaitingForReply = {};\n\n    /**\r\n     * @param {string} type Type of message\r\n     * @param message Message to send\r\n     * @param {number} destinationNode ID of destination node\r\n     * @param {{wantReply: boolean, isFailure: boolean, requestId: number}} options If {wantReply: true}, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\r\n     */\n    db.sendMessage = function (type, message, destinationNode, options) {\n        /// <param name=\"type\" type=\"String\">Type of message</param>\n        /// <param name=\"message\">Message to send</param>\n        /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\n        /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\n        options = options || {};\n        var msg = { message: message, destinationNode: destinationNode, sender: mySyncNode.id, type: type };\n        Dexie.extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\n        if (!mySyncNode) return options.wantReply ? Promise.reject(new Dexie.DatabaseClosedError()) : Promise.resolve(); // If caller dont want reply, it wont catch errors either.\n\n        return Dexie.ignoreTransaction(function () {\n            var tables = [\"_intercomm\"];\n            if (options.wantReply) tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a reciever there. Otherwise, new master will get it.\n            var promise = db.transaction('rw', tables, function () {\n                if (options.wantReply) {\n                    // Check that there is a reciever there to take the request.\n                    return db._syncNodes.where('id').equals(destinationNode).count(function (recieverAlive) {\n                        if (recieverAlive) return db._intercomm.add(msg);else return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\n                            msg.destinationNode = masterNode.id;\n                            return db._intercomm.add(msg);\n                        });\n                    });\n                } else {\n                    // If caller doesnt need a response, we must not make sure to get one.\n                    return db._intercomm.add(msg);\n                }\n            }).then(function (messageId) {\n                var rv = null;\n                if (options.wantReply) {\n                    rv = new Promise(function (resolve, reject) {\n                        requestsWaitingForReply[messageId.toString()] = { resolve: resolve, reject: reject };\n                    });\n                }\n                if (localStorage) {\n                    localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\n                }\n                Observable.on.intercomm.fire(db.name);\n                return rv;\n            });\n\n            if (!options.wantReply) {\n                promise.catch(function () {});\n                return;\n            } else {\n                // Forward rejection to caller if it waits for reply.\n                return promise;\n            }\n        });\n    };\n\n    db.broadcastMessage = function (type, message, bIncludeSelf) {\n        if (!mySyncNode) return;\n        var mySyncNodeId = mySyncNode.id;\n        Dexie.ignoreTransaction(function () {\n            db._syncNodes.toArray(function (nodes) {\n                return Promise.all(nodes.filter(function (node) {\n                    return node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId);\n                }).map(function (node) {\n                    return db.sendMessage(type, message, node.id);\n                }));\n            }).catch(function () {});\n        });\n    };\n\n    db.observable = {};\n    db.observable.SyncNode = SyncNode;\n\n    function consumeIntercommMessages() {\n        // Check if we got messages:\n        if (!mySyncNode) return Promise.reject(new Dexie.DatabaseClosedError());\n        return Dexie.ignoreTransaction(function () {\n            return db._intercomm.where({ destinationNode: mySyncNode.id }).toArray(function (messages) {\n                messages.forEach(function (msg) {\n                    return consumeMessage(msg);\n                });\n                return db._intercomm.where('id').anyOf(messages.map(function (msg) {\n                    return msg.id;\n                })).delete();\n            });\n        });\n    }\n\n    function consumeMessage(msg) {\n        if (msg.type === 'response') {\n            // This is a response. Lookup pending request and fulfill it's promise.\n            var request = requestsWaitingForReply[msg.requestId.toString()];\n            if (request) {\n                if (msg.isFailure) {\n                    request.reject(msg.message.error);\n                } else {\n                    request.resolve(msg.message.result);\n                }\n                delete requestsWaitingForReply[msg.requestId.toString()];\n            }\n        } else {\n            // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\n            msg.resolve = function (result) {\n                db.sendMessage('response', { result: result }, msg.sender, { requestId: msg.id });\n            };\n            msg.reject = function (error) {\n                db.sendMessage('response', { error: error.toString() }, msg.sender, { isFailure: true, requestId: msg.id });\n            };\n            var message = msg.message;\n            delete msg.message;\n            Dexie.extend(msg, message);\n            db.on.message.fire(msg);\n        }\n    }\n\n    function onIntercomm(dbname) {\n        // When storage event trigger us to check\n        if (dbname === db.name) {\n            consumeIntercommMessages().catch('DatabaseClosedError', function () {});\n        }\n    }\n}\n\n//\n// Help functions\n//\n\nfunction nop() {};\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this,\n                args = arguments;\n            return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n//\n// Static properties and methods\n// \n\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\nObservable.on = Dexie.Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\nObservable.createUUID = function () {\n    // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    var d = Date.now();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n};\n\nObservable.deleteOldChanges = function (db) {\n    // This is a background job and should never be done within\n    // a caller's transaction. Use Dexie.ignoreTransaction() to ensure that.\n    // We should not return the Promise but catch it ourselves instead.\n\n    // To prohibit starving the database we want to lock transactions as short as possible\n    // and since we're not in a hurry, we could do this job in chunks and reschedule a \n    // continuation every 500 ms.\n    var CHUNK_SIZE = 100;\n\n    Dexie.ignoreTransaction(function () {\n        return db._syncNodes.orderBy(\"myRevision\").first(function (oldestNode) {\n            return db._changes.where(\"rev\").below(oldestNode.myRevision).limit(CHUNK_SIZE).primaryKeys();\n        }).then(function (keysToDelete) {\n            if (keysToDelete.length === 0) return; // Done.\n            return db._changes.bulkDelete(keysToDelete).then(function () {\n                // If not done garbage collecting, reschedule a continuation of it until done.\n                if (keysToDelete.length === CHUNK_SIZE) {\n                    // Limit reached. Changes are there are more job to do. Schedule again:\n                    setTimeout(function () {\n                        return db.isOpen() && Observable.deleteOldChanges(db);\n                    }, 500);\n                }\n            });\n        });\n    }).catch(function () {\n        // The operation is not cruzial. A failure could almost only be due to that database has been closed.\n        // No need to log this.\n    });\n};\n\nObservable._onStorage = function onStorage(event) {\n    // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\n    if (event.key.indexOf(\"Dexie.Observable/\") === 0) {\n        // For example \"Dexie.Observable/latestRevision/FriendsDB\"\n        var parts = event.key.split('/');\n        var prop = parts[1];\n        var dbname = parts[2];\n        if (prop === 'latestRevision') {\n            var rev = parseInt(event.newValue, 10);\n            if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\n                Observable.latestRevision[dbname] = rev;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on('latestRevisionIncremented').fire(dbname, rev);\n                });\n            }\n        } else if (prop.indexOf(\"deadnode:\") === 0) {\n            var nodeID = parseInt(prop.split(':')[1], 10);\n            if (event.newValue) {\n                Observable.on.suicideNurseCall.fire(dbname, nodeID);\n            }\n        } else if (prop === 'intercomm') {\n            if (event.newValue) {\n                Observable.on.intercomm.fire(dbname);\n            }\n        }\n    }\n};\n\nObservable._onBeforeUnload = function () {\n    Observable.on.beforeunload.fire();\n};\n\ntry {\n    Observable.localStorageImpl = global.localStorage;\n} catch (ex) {}\n\n//\n// Map window events to static events in Dexie.Observable:\n//\nif (global.addEventListener) {\n    global.addEventListener(\"storage\", Observable._onStorage);\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\n}\n// Register addon:\nDexie.Observable = Observable;\nDexie.addons.push(Observable);"]}